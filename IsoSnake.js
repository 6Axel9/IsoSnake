window.onload = init(); 

function init()
{
	c = document.getElementById('IsoSnake');
	ctx = c.getContext('2d');
	//==========================================================Sizing Canvas & Tiles (Real Distances Between Cubes Without Fixes)
	var TileSizeX=30;								//Tile X Size	
	var TileSizeZ=2*TileSizeX/(Math.sqrt(3));		//Tile Z Size
	var TileSizeY=2*TileSizeX/(Math.sqrt(3));		//Tile Y Size
	
	c.width=26*TileSizeX;							//Canvas Width
	c.height=16*TileSizeY;							//Canvas Height
	
	var keysDown = {};var Turning=false;			//Keyboard Input
	addEventListener("keydown",function(e){keysDown[e.keyCode]=true;},false);
	addEventListener("keyup",function(e){delete keysDown[e.keyCode];Turning=false;},false);
	//==========================================================Apple Image
	var AppleReady = false;
	var AppleImage = new Image();
	AppleImage.onload = function ()
	{ AppleReady = true; };
	AppleImage.src = "Pictures/Apple.png";
	//==========================================================World Gradients Colour
	var Outline=["rgb(80, 30, 0)","rgb(8, 90, 5)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)","rgb(0, 255, 255)"] 
	var Inside=["rgb(155, 80, 50)","rgb(100, 180, 55)","rgb(100, 190, 210)","rgb(100, 190, 220)","rgb(100, 190, 230)","rgb(100, 190, 240)","rgb(100, 190, 250)","rgb(100, 190, 255)","rgb(100, 190, 255)","rgb(100, 190, 255)"]
	var InsideShadowDark=["rgb(77, 40, 25)","rgb(50, 90, 27)","rgb(50, 95, 105)","rgb(50, 95, 110)","rgb(50, 95, 115)","rgb(50, 95, 120)","rgb(50, 95, 125)","rgb(50, 95, 127)","rgb(50, 95, 127)","rgb(50, 95, 127)"]
	var InsideShadowLight=["rgb(108, 56, 35)","rgb(70, 126, 55)","rgb(70, 133, 147)","rgb(70, 133, 154)","rgb(70, 133, 161)","rgb(70, 133, 168)","rgb(70, 133, 175)","rgb(70, 133, 178)","rgb(70, 133, 178)","rgb(70, 133, 178)"]
	//==========================================================3Dimensional Array/TileMap
	var TileMap=
	[
		[	//=====================================FLOOR 1ST====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		
		],
		[	//=====================================FLOOR 2ND====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]		
		],
		[	//=====================================FLOOR 3RD====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 4TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 5TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 6TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 7TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 8TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 9TH====================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		],
		[	//=====================================FLOOR 10TH===================================================================================//
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
			[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]			
		]
	];
	//==========================================================Object Datas
	var Apothem,Height,Width;						//Hexagon Data
	
	var TempX=[], TempY=[], TempZ=[];var D; 		//Snake Positions
	
	var AppleX=23+Math.floor(Math.random()*20);		//Apple X Position
	var AppleY=1+Math.floor(Math.random()*17);		//Apple Y Position
	var AppleZ=2+Math.floor(Math.random()*8);		//Apple Z Position
	
	var XSpeed=0,YSpeed=0,Floor=0;					//Speeds
	var SnakeSize=0,GameState=0,Score=0;			//Game Data
	var Start=false,Impossible=false;				//Start&Difficulty
	var EvenMoreImpossible=false;					//Hyper Difficulty
	var Timer=0;									//Timer
	
	
	var X,Z,Y;										//Coordinates
	var Xfix,Xfix2;									//X Fixes
	var Zfix,Zfix2;									//Z Fixes
	var Yfix;										//Y Fixes
	//==========================================================CUBE UNIT
	function DrawCube(X,Z,Y)
	{
		//==========================================================Calculations
		Xfix=X;Zfix=X;Yfix=Z;
		Xfix2=Z;Zfix2=Z;
		
		Width=TileSizeX;
		Apothem=Width/2;
		Height=2*(Apothem /(Math.sqrt(3)));
	
		//==========================================================DRAW LEFT SIDE
		ctx.strokeStyle=Outline[Y];			//Outline
		ctx.lineWidth=2;
		ctx.fillStyle=InsideShadowDark[Y];	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+		Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
		
		//==========================================================DRAW RIGHT SIDE
		ctx.strokeStyle=Outline[Y];			//Outline
		ctx.lineWidth=2;
		ctx.fillStyle=InsideShadowLight[Y];	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+		Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
		
		//==========================================================DRAW TOP SIDE
		ctx.strokeStyle=Outline[Y];			//Outline
		ctx.lineWidth=2;
		ctx.fillStyle=Inside[Y];			//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
	}
	//==========================================================APPLE UNIT
	function DrawApple(X,Z,Y)
	{
		//==========================================================Calculations
		Xfix=X;Zfix=X;Yfix=Z;
		Xfix2=Z;Zfix2=Z;
		
		Width=TileSizeX;
		Apothem=Width/2;
		Height=2*(Apothem /(Math.sqrt(3)));
	
		//==========================================================DRAW APPLE
		//==========================X Coordinates====================X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes=========Sizes
		ctx.drawImage(AppleImage,	X*TileSizeX+Apothem*0.25-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height-Height/4+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height	,Width*0.75,Height*1.5);
		//==========================X Coordinates====================X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes=========Sizes
	}
	//==========================================================SNAKE HEAD
	function DrawSnakeHead(X,Z,Y,D)
	{		
		if (D==1||D==0)
		{	//==========================================================Start Position
			if (D==1)
			{ D=-1;X++;Z--; }
			if (D==0)
			{ D=1; }	
			//==========================================================Calculations
			Xfix=X;Zfix=X;Yfix=Z;
			Xfix2=Z;Zfix2=Z;
			
			Width=TileSizeX;
			Apothem=Width/2;
			Height=2*(Apothem /(Math.sqrt(3)));
			
			//==========================================================DRAW TOP SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,225,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.beginPath();
			ctx.moveTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX-					Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
			
			//==========================================================DRAW RIGHT SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,157,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.beginPath();
			ctx.moveTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/8-Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.375-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.375-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4+Height/8-Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/16+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/16+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+								Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/4+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
			
			//==========================================================DRAW LEFT SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,112,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.beginPath();
			ctx.moveTo	(X*TileSizeX-					Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+								Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/4+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem/2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/16+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX-					Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+							Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX-					Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+								Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem*1.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.5-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/16+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.5-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/8+Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/8-Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*1.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
		}
		if (D==2||D==3)
		{	//==========================================================Start Position
			if (D==3)
			{ D=-1;X++;Z--; }
			if (D==2)
			{ D=1; }	
			//==========================================================Calculations
			Xfix=X;Zfix=X;Yfix=Z;
			Xfix2=Z;Zfix2=Z;
			
			Width=TileSizeX;
			Apothem=Width/2;
			Height=2*(Apothem /(Math.sqrt(3)));
			
			//==========================================================DRAW RIGHT SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,157,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.beginPath();
			ctx.moveTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+							Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+								Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem*0.4375-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.3125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.3125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8-Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates===============================Z Isometric View Fixes==========Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
			
			//==========================================================DRAW TOP SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,225,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates==================Z Isometric View Fixes===========Y & Isometric View Fixes
			ctx.beginPath();
			ctx.moveTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*2-		Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height-Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.moveTo	(X*TileSizeX+D*Apothem*0.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.75-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/16+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates==================Z Isometric View Fixes===========Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
			
			//==========================================================DRAW LEFT SIDE
			ctx.strokeStyle=Outline[Y];		//Outline
			ctx.lineWidth=2;
			ctx.fillStyle="rgb(0,112,0)";	//Colour
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates=============================Z Isometric View Fixes============Y & Isometric View Fixes
			ctx.beginPath();
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height+Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8+Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.3125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/32+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.3125-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2-Height/8-Height/32+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/16+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.625-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/8+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/2+Height/8+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem*0.25-	Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ-Height/4+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.lineTo	(X*TileSizeX+D*Apothem-			Xfix*Apothem-Xfix2*Apothem,	Z*TileSizeZ+Height/2+						Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
			ctx.closePath();
			//===============X Coordinates===============X Isometric View Fixes========Z Coordinates=============================Z Isometric View Fixes============Y & Isometric View Fixes
			ctx.fill();
			ctx.stroke();
		}
	}
	//==========================================================SNAKE BODY UNITS
	function DrawSnakeBody(X,Z,Y)
	{
		//==========================================================Calculations
		Xfix=X;Zfix=X;Yfix=Z;
		Xfix2=Z;Zfix2=Z;
		
		Width=TileSizeX;
		Apothem=Width/2;
		Height=2*(Apothem /(Math.sqrt(3)));
	
		//==========================================================DRAW LEFT SIDE
		ctx.strokeStyle=Outline[Y];		//Outline
		ctx.lineWidth=2;
		ctx.fillStyle="rgb(0,112,0)";	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+		Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
		
		//==========================================================DRAW RIGHT SIDE
		ctx.strokeStyle=Outline[Y];		//Outline
		ctx.lineWidth=2;
		ctx.fillStyle="rgb(0,157,0)";	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+		Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ+Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===========Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
		
		//==========================================================DRAW TOP SIDE
		ctx.strokeStyle=Outline[Y];		//Outline
		ctx.lineWidth=2;
		ctx.fillStyle="rgb(0,225,0)";	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
	}
	//==========================================================SHADOW UNIT
	function DrawShadow(X,Z,Y)
	{
		//==========================================================Calculations
		Xfix=X;Zfix=X;Yfix=Z;
		Xfix2=Z;Zfix2=Z;Y=1;
		
		Width=TileSizeX;
		Apothem=Width/2;
		Height=2*(Apothem /(Math.sqrt(3)));
	
		//==========================================================DRAW TOP SIDE
		ctx.strokeStyle=Outline[Y];			//Outline
		ctx.lineWidth=2;
		ctx.fillStyle=InsideShadowDark[Y];	//Colour
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.beginPath();
		ctx.moveTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Width-		Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height-Height/2+	Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX-			Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height+				Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.lineTo	(X*TileSizeX+Apothem-	Xfix*Apothem-Xfix2*Apothem,		Z*TileSizeZ-Height/2+			Zfix*Height/2-Zfix2*Height/2	-Y*TileSizeY/2	-Yfix*Height);
		ctx.closePath();
		//===============X Coordinates========X Isometric View Fixes==========Z Coordinates===================Z Isometric View Fixes===========Y & Isometric View Fixes
		ctx.fill();
		ctx.stroke();
	}
	//==========================================================DRAW MENU
	function DrawMenu(X,Y,Z)
	{
		SnakeSize=15+17+18+14+13+19+12+6;D=2;			//Set The Whole Snake Size & Coordinates So The Game Title Will Be Drawn
		TempX[0]=25+X;TempY[0]=0+Y;TempZ[0]=8;			TempX[31]=18+X;TempY[31]=0+Y;TempZ[31]=3;			TempX[62]=7+X;TempY[62]=0+Y;TempZ[62]=7;		TempX[93]=2+X;TempY[93]=3+Y;TempZ[93]=3;
		TempX[1]=26+X;TempY[1]=0+Y;TempZ[1]=8;			TempX[32]=17+X;TempY[32]=0+Y;TempZ[32]=3;			TempX[63]=6+X;TempY[63]=0+Y;TempZ[63]=7;		TempX[94]=2+X;TempY[94]=4+Y;TempZ[94]=3;
		TempX[2]=27+X;TempY[2]=0+Y;TempZ[2]=8;			TempX[33]=17+X;TempY[33]=0+Y;TempZ[33]=4;			TempX[64]=5+X;TempY[64]=0+Y;TempZ[64]=7;		TempX[95]=2+X;TempY[95]=5+Y;TempZ[95]=3;
		TempX[3]=27+X;TempY[3]=0+Y;TempZ[3]=7;			TempX[34]=16+X;TempY[34]=0+Y;TempZ[34]=4;			TempX[65]=4+X;TempY[65]=0+Y;TempZ[65]=7;		TempX[96]=2+X;TempY[96]=6+Y;TempZ[96]=3;
		TempX[4]=27+X;TempY[4]=0+Y;TempZ[4]=6;			TempX[35]=15+X;TempY[35]=0+Y;TempZ[35]=4;			TempX[66]=3+X;TempY[66]=0+Y;TempZ[66]=7;		TempX[97]=2+X;TempY[97]=7+Y;TempZ[97]=3;
		TempX[5]=26+X;TempY[5]=0+Y;TempZ[5]=6;			TempX[36]=14+X;TempY[36]=0+Y;TempZ[36]=4;			TempX[67]=3+X;TempY[67]=0+Y;TempZ[67]=6;		TempX[98]=2+X;TempY[98]=8+Y;TempZ[98]=3;
		TempX[6]=25+X;TempY[6]=0+Y;TempZ[6]=6;			TempX[37]=13+X;TempY[37]=0+Y;TempZ[37]=4;			TempX[68]=3+X;TempY[68]=0+Y;TempZ[68]=5;		TempX[99]=2+X;TempY[99]=8+Y;TempZ[99]=4;
		TempX[7]=25+X;TempY[7]=0+Y;TempZ[7]=5;			TempX[38]=13+X;TempY[38]=0+Y;TempZ[38]=5;			TempX[69]=4+X;TempY[69]=0+Y;TempZ[69]=5;		TempX[100]=2+X;TempY[100]=8+Y;TempZ[100]=5;
		TempX[8]=26+X;TempY[8]=0+Y;TempZ[8]=5;			TempX[39]=14+X;TempY[39]=0+Y;TempZ[39]=6;			TempX[70]=5+X;TempY[70]=0+Y;TempZ[70]=5;		TempX[101]=2+X;TempY[101]=7+Y;TempZ[101]=5;
		TempX[9]=27+X;TempY[9]=0+Y;TempZ[9]=5;			TempX[40]=15+X;TempY[40]=0+Y;TempZ[40]=7;			TempX[71]=5+X;TempY[71]=0+Y;TempZ[71]=4;		TempX[102]=2+X;TempY[102]=6+Y;TempZ[102]=5;
		TempX[10]=27+X;TempY[10]=0+Y;TempZ[10]=4;		TempX[41]=16+X;TempY[41]=0+Y;TempZ[41]=6;			TempX[72]=5+X;TempY[72]=0+Y;TempZ[72]=3;		TempX[103]=2+X;TempY[103]=6+Y;TempZ[103]=6;
		TempX[11]=27+X;TempY[11]=0+Y;TempZ[11]=3;		TempX[42]=17+X;TempY[42]=0+Y;TempZ[42]=5;			TempX[73]=4+X;TempY[73]=0+Y;TempZ[73]=3;		TempX[104]=2+X;TempY[104]=6+Y;TempZ[104]=7;
		TempX[12]=26+X;TempY[12]=0+Y;TempZ[12]=3;		TempX[43]=17+X;TempY[43]=0+Y;TempZ[43]=4;			TempX[74]=3+X;TempY[74]=0+Y;TempZ[74]=3;		TempX[105]=2+X;TempY[105]=7+Y;TempZ[105]=7;
		TempX[13]=25+X;TempY[13]=0+Y;TempZ[13]=3;		TempX[44]=16+X;TempY[44]=0+Y;TempZ[44]=4;			TempX[75]=3+X;TempY[75]=0+Y;TempZ[75]=3;		TempX[106]=2+X;TempY[106]=8+Y;TempZ[106]=7;
		TempX[14]=24+X;TempY[14]=0+Y;TempZ[14]=3;		TempX[45]=15+X;TempY[45]=0+Y;TempZ[45]=4;			TempX[76]=2+X;TempY[76]=0+Y;TempZ[76]=3;		TempX[107]=2+X;TempY[107]=9+Y;TempZ[107]=7;
		TempX[15]=23+X;TempY[15]=0+Y;TempZ[15]=3;		TempX[46]=14+X;TempY[46]=0+Y;TempZ[46]=4;			TempX[77]=2+X;TempY[77]=1+Y;TempZ[77]=3;		TempX[108]=2+X;TempY[108]=10+Y;TempZ[108]=7;
		TempX[16]=22+X;TempY[16]=0+Y;TempZ[16]=4;		TempX[47]=13+X;TempY[47]=0+Y;TempZ[47]=4;			TempX[78]=2+X;TempY[78]=2+Y;TempZ[78]=3;		TempX[109]=2+X;TempY[109]=10+Y;TempZ[109]=6;
		TempX[17]=21+X;TempY[17]=0+Y;TempZ[17]=5;		TempX[48]=13+X;TempY[48]=0+Y;TempZ[48]=3;			TempX[79]=2+X;TempY[79]=3+Y;TempZ[79]=3;		TempX[110]=2+X;TempY[110]=10+Y;TempZ[110]=5;
		TempX[18]=21+X;TempY[18]=0+Y;TempZ[18]=6;		TempX[49]=12+X;TempY[49]=0+Y;TempZ[49]=3;			TempX[80]=2+X;TempY[80]=4+Y;TempZ[80]=3;		TempX[111]=2+X;TempY[111]=10+Y;TempZ[111]=4;
		TempX[19]=22+X;TempY[19]=0+Y;TempZ[19]=7;		TempX[50]=11+X;TempY[50]=0+Y;TempZ[50]=3;			TempX[81]=2+X;TempY[81]=4+Y;TempZ[81]=4;		TempX[112]=2+X;TempY[112]=10+Y;TempZ[112]=3;
		TempX[20]=23+X;TempY[20]=0+Y;TempZ[20]=8;		TempX[51]=11+X;TempY[51]=0+Y;TempZ[51]=4;			TempX[82]=2+X;TempY[82]=4+Y;TempZ[82]=5;
		TempX[21]=23+X;TempY[21]=0+Y;TempZ[21]=9;		TempX[52]=11+X;TempY[52]=0+Y;TempZ[52]=5;			TempX[83]=2+X;TempY[83]=4+Y;TempZ[83]=6;
		TempX[22]=22+X;TempY[22]=0+Y;TempZ[22]=8;		TempX[53]=11+X;TempY[53]=0+Y;TempZ[53]=6;			TempX[84]=2+X;TempY[84]=4+Y;TempZ[84]=7;
		TempX[23]=21+X;TempY[23]=0+Y;TempZ[23]=7;		TempX[54]=11+X;TempY[54]=0+Y;TempZ[54]=7;			TempX[85]=2+X;TempY[85]=3+Y;TempZ[85]=7;
		TempX[24]=20+X;TempY[24]=0+Y;TempZ[24]=6;		TempX[55]=10+X;TempY[55]=0+Y;TempZ[55]=6;			TempX[86]=2+X;TempY[86]=2+Y;TempZ[86]=7;
		TempX[25]=19+X;TempY[25]=0+Y;TempZ[25]=8;		TempX[56]=9+X;TempY[56]=0+Y;TempZ[56]=5;			TempX[87]=2+X;TempY[87]=1+Y;TempZ[87]=7;
		TempX[26]=19+X;TempY[26]=0+Y;TempZ[26]=7;		TempX[57]=8+X;TempY[57]=0+Y;TempZ[57]=4;			TempX[88]=2+X;TempY[88]=1+Y;TempZ[88]=6;
		TempX[27]=19+X;TempY[27]=0+Y;TempZ[27]=6;		TempX[58]=7+X;TempY[58]=0+Y;TempZ[58]=3;			TempX[89]=2+X;TempY[89]=1+Y;TempZ[89]=5;
		TempX[28]=19+X;TempY[28]=0+Y;TempZ[28]=5;		TempX[59]=7+X;TempY[59]=0+Y;TempZ[59]=4;			TempX[90]=2+X;TempY[90]=1+Y;TempZ[90]=4;
		TempX[29]=19+X;TempY[29]=0+Y;TempZ[29]=4;		TempX[60]=7+X;TempY[60]=0+Y;TempZ[60]=5;			TempX[91]=2+X;TempY[91]=1+Y;TempZ[91]=3;
		TempX[30]=19+X;TempY[30]=0+Y;TempZ[30]=3;		TempX[61]=7+X;TempY[61]=0+Y;TempZ[61]=6;			TempX[92]=2+X;TempY[92]=2+Y;TempZ[92]=3;
	}
	//==========================================================DRAW SCORE
	function DrawScore(X,Y)
	{
		ctx.fillStyle="rgb(0,225,0)";
		ctx.font ="20px Cubrick";
		ctx.fillText(" Score="+Score,X*TileSizeX,Y*TileSizeY);
	}
	//==========================================================DRAW GRID/TILE-MAP
	function DrawGrid()
	{
		for (h=0;h<TileMap.length;h++)							//For Each Of The Y Coordinates 
		{														//				&
			for (d=0;d<TileMap[h].length;d++)					//For Each Of The Z Coordinates 
			{													//				&
				for (w=0;w<TileMap[h][d].length;w++)			//For Each Of The X Coordinates
				{												
					if ((TileMap[h][d][w]==1)&&GameState==1)	
					{
						DrawCube(w,d,h);						//Draw A Cube Unit
					}
					if (((w==AppleX)&&(d==AppleY)&&(h==AppleZ))&&GameState==1)
					{
						DrawApple(AppleX,AppleY,AppleZ);		//Draw Fruit
					}
					if (((w==AppleX)&&(d==AppleY)&&(h==1))&&GameState==1)
					{
						DrawShadow(AppleX,AppleY,AppleZ);		//Draw Apple Shadow
					}
					for (i=0;i<SnakeSize;i++)
					{
						if ((w==TempX[i])&&(d==TempY[i])&&(h==TempZ[i]))
						{
							if (i==0)
							{	DrawSnakeHead(TempX[i],TempY[i],TempZ[i],D);	}	//Draw Snake Head
							if (i!=0)
							{	DrawSnakeBody(TempX[i],TempY[i],TempZ[i]);		}	//Draw Snake Body
						}
						if ((w==TempX[i])&&(d==TempY[i])&&(h==1))
						{
							DrawShadow(TempX[i],TempY[i],TempZ[i]);					//Draw Snake Shadow
						}
					}
				}
			}	
		}
	}
	//==========================================================CLEAR SCREEN
	function ClearScreen()
	{ 
		//==========================================================Black Background 
		ctx.fillStyle = "Black";
		ctx.beginPath();
		ctx.rect(0,0,c.width,c.height);
		ctx.closePath();
		ctx.fill();  
	} 
	//==========================================================UPDATE SCREEN
	function UpdateObjects()
	{
		if (GameState==0)
		{
			//==========================================================Start
			if (32 in keysDown) { Start=true; }	
			//==========================================================Menu
			if (Start==false)   
			{
				ctx.fillStyle="rgb(0,225,0)";
				ctx.font ="15px Cubrick";
				ctx.fillText("  Press (Space) To",9*TileSizeX,8*TileSizeY);
				ctx.font ="10px Cubrick";
				ctx.fillText("   Use Arrow Keys To Move",9*TileSizeX,10*TileSizeY);
				ctx.font ="30px Cubrick";
				ctx.fillText(" Start",10*TileSizeX,9*TileSizeY);
				DrawMenu(17,0,0);Timer=SnakeSize;
			}
			//==========================================================Loading Screen
			if (Start==true)
			{
				ctx.fillStyle="rgb(0,225,0)";
				ctx.font="40px Cubrick";
				ctx.fillText(" Loading",8*TileSizeX,9*TileSizeY);
				//==========================================================Animation
				if (Timer==0)
				{	D=Math.floor(Math.random() * 4);
					GameState=1;Start=false;
					if (Impossible==false)
					{	SnakeSize=2;	} 
					if (Impossible==true)
					{	SnakeSize=(TileMap[0].length*TileMap[0][0].length)+1;	}
					if (EvenMoreImpossible==true)
					{	SnakeSize=(TileMap.length*TileMap[0].length*TileMap[0][0].length)+1;	}
				}	SnakeSize--;Timer--;
			}
		}
		if(GameState==1)
		{
			DrawScore(1,1);								//Draw Score
			//==========================================================Keyboard Input
			if (37 in keysDown&&Turning==false){ D--;if (D<0){ D=3; }Turning=true; }	//Turn Only If You Don't Already
			if (39 in keysDown&&Turning==false){ D++;if (D>3){ D=0; }Turning=true; }	//Turn Only If You Don't Already
			if (38 in keysDown){ Floor++;if (Floor>7){Floor=7;} }						//Rise
			if (40 in keysDown){ Floor--;if (Floor<0){Floor=0;} }						//Dive
			//==========================================================AutoMovement Directions
			if (D==0)									//Check Direction
			{	XSpeed++;								//Increase The Right Coordinates
				if (38 in keysDown||40 in keysDown)
				{	XSpeed--;							//Can't Go Forward While Rising/Diving
					if (Floor==7||Floor==0)
					{	XSpeed++;	}	}	}	
			if (D==1)									//Check Direction
			{	YSpeed++;								//Increase The Right Coordinates
				if (38 in keysDown||40 in keysDown)
				{	YSpeed--;							//Can't Go Forward While Rising/Diving
					if (Floor==7||Floor==0)
					{	YSpeed++;	}	}	}	
			if (D==2)									//Check Direction
			{	XSpeed--;								//Increase The Right Coordinates
				if (38 in keysDown||40 in keysDown)
				{	XSpeed++;							//Can't Go Forward While Rising/Diving
					if (Floor==7||Floor==0)
					{	XSpeed--;	}	}	}	
			if (D==3)									//Check Direction
			{	YSpeed--;								//Increase The Right Coordinates
				if (38 in keysDown||40 in keysDown)
				{	YSpeed++;							//Can't Go Forward While Rising/Diving
					if (Floor==7||Floor==0)
					{	YSpeed--;	}	}	}
			//==========================================================Snake Re-spawn
			if (XSpeed>20)	{ XSpeed=0; }				//Grid Limit
			if (XSpeed<0)	{ XSpeed=20; }				//Grid Limit
			if (YSpeed>17)	{ YSpeed=0; }				//Grid Limit
			if (YSpeed<0)	{ YSpeed=17; }				//Grid Limit
			//==========================================================Snake Eating
			if (TempX[0]==AppleX&&TempY[0]==AppleY&&TempZ[0]==AppleZ)
			{
				SnakeSize++; Score++; 					//Increase Snake Size
				//==========================================================Apple Re-spawn
				AppleX=23+Math.floor(Math.random()*21);	
				AppleY=1+Math.floor(Math.random()*18);
				AppleZ=2+Math.floor(Math.random()*8);
			}
			//==========================================================Snake Crash
			for (i=1;i<SnakeSize;i++)
			{ 
				if (TempX[0]==TempX[i]&&TempY[0]==TempY[i]&&TempZ[0]==TempZ[i])
				{
					GameState=2;						//Losing Screen
				}
			}
			//==========================================================Snake Tail AutoMovement
			for (i=SnakeSize;i>0;i--)
			{	
				//Set Each Snake Piece To Move To The Last Position Of The Following Piece
				TempX[i]=TempX[i-1];TempY[i]=TempY[i-1];TempZ[i]=TempZ[i-1];	
			}
			//==========================================================Snake Position
			TempX[0]=23+XSpeed;	TempY[0]=1+YSpeed;	TempZ[0]=2+Floor;	//Snake Head Positions 
		}
		if(GameState==2)
		{
			SnakeSize=0;							//Delete Snake
			DrawScore(10,14);						//Draw Score
			//==========================================================End Game
			ctx.font ="30px Cubrick";
			ctx.fillText(" You Lost",9*TileSizeX,5*TileSizeY);
			//==========================================================Restart
			ctx.font ="10px Cubrick";
			ctx.fillText("  Press (Space) To Retry",4*TileSizeX,12*TileSizeY);
			ctx.fillText("  Press (Enter) To Go To Menu",14*TileSizeX,12*TileSizeY);
			//==========================================================Retry
			if (32 in keysDown) 
			{
				//==========================================================Reset
				Start=true;
				XSpeed=0,YSpeed=0,Floor=0;			//Speeds
				GameState=0,Score=0;				//Game Data
				SnakeSize=0;Timer=60;				//Timer
			}
			//==========================================================To Menu
			if (13 in keysDown) 
			{
				//==========================================================Reset
				XSpeed=0,YSpeed=0,Floor=0;			//Speeds
				GameState=0,Score=0;				//Game Data
			}
			//==========================================================Comment
			if (Score>0&&Score<10)
			{
				ctx.font ="10px Cubrick";
				ctx.fillText("( Game Creator )",19*TileSizeX,9*TileSizeY);
				
				ctx.font ="20px Cubrick";
				ctx.fillText("Sorry Newbie, Couldn't Make The Game Easier",1*TileSizeX,7*TileSizeY);
				ctx.fillText("Than This",10*TileSizeX,8*TileSizeY);
			}
			//==========================================================Comment
			if (Score>9&&Score<15)
			{
				ctx.font ="10px Cubrick";
				ctx.fillText("( Cit. Thor )",19*TileSizeX,9*TileSizeY);
				
				ctx.font ="20px Cubrick";
				ctx.fillText("Is That The Best You Can Do?!?!?!?",4*TileSizeX,8*TileSizeY);
			}
			//==========================================================Comment
			if (Score>14&&Score<20)
			{
				ctx.font ="10px Cubrick";
				ctx.fillText("( True Statistic Evaluation )",17*TileSizeX,9*TileSizeY);
				
				ctx.font ="20px Cubrick";
				ctx.fillText(" 99.9% Of Peoples That Played This Game",2*TileSizeX,7*TileSizeY);
				ctx.fillText(" Scored Better Than This",6*TileSizeX,8*TileSizeY);
			}
			//==========================================================Comment
			if (Score>19)
			{
				ctx.font ="10px Cubrick";
				ctx.fillText("( Game Creator )",19*TileSizeX,9*TileSizeY);
				
				ctx.font ="20px Cubrick";
				ctx.fillText("  Thanks For Having Enjoyed My Game",3*TileSizeX,7*TileSizeY);
				ctx.fillText("  Stay Tuned For Upcoming Update",4*TileSizeX,8*TileSizeY);
			}
		}
	}
	//==========================================================DISPLAY OBJECTS
	function SetObjects()
	{
		DrawGrid();							//Draw TileMap/Grid/Objects
	}
	//==========================================================MAIN GAME LOOP
	function GameLoop()
	{	
		ClearScreen();						//Clear Screen
		UpdateObjects();    				//Update Objects & Positions
		SetObjects();  						//Draw Objects
		setTimeout(GameLoop,1000/60);		//Timeout-Loop Restart
	}
	GameLoop();
}